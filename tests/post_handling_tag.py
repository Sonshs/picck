decoded_tags_list= [
    ['N', 'C', '2', '3', 'E', '-', '2', '1', '0', '1', '9', '4', '4', 'N', 'C', '3', '9', '-', '1', '1', '0', '1', '9', '4', '2', '2', '2', ' ', 'N', 'g', 'u', 'y', 'ễ', 'n', ' ', 'V', 'ă', 'n', ' ', 'G', \
    'i', 'a', 'i', ' ', 'P', '.', 'Đ', 'a', 'K', 'a', 'o', ' ', 'Q', '1', 'C', 'B', ' ', '4', '0', '0', 'H', 'O', 'N', 'D', 'A', 'H', 'a', 'i', ' ', 'b', 'á', 'n', 'h', 'B', 'Ạ', 'C', '3', '9', '9', '0', \
    '2', 'T', 'ị', 'c', 'h', ' ', 't', 'h', 'u', ' ', 's', 'u', 'n', 'g', ' ', 'q', 'u', 'ỹ', ' ', 'N', 'N', ' ', 'n', 'g', 'à', 'y', ' ', '(', 'd', 'a', 't', 'e', ')', ' ', '1', '6', ' ', 't', 'h', 'á', \
    'n', 'g', ' ', '1', '0', ' ', 'n', 'ă', 'm', ' ', '2', '0', '1', '3', 'P', '.', ' ', 'T', 'R', 'Ư', 'Ở', 'N', 'G', ' ', 'P', 'H', 'Ò', 'N', 'G', '5', '9', 'A', '3', '-', '0', '3', '2', '.', '8', '4', \
    'F', 'i', 'r', 's', 't', ' ', 'r', 'e', 'g', 'i', 's', 't', 'r', 'a', 't', 'i', 'o', 'n', ' ', 'd', 'a', 't', 'e', 'T', 'H', 'Ư', 'Ợ', 'N', 'G', ' ', 'T', 'Á', ':', ' ', 'T', 'r', 'ầ', 'n', ' ', 'V', \
    'ă', 'n', ' ', 'T', 'h', 'ư', 'ơ', 'n', 'g', '1', '6', '/', '1', '0', '/', '2', '0', '1', '3']]
predicted_tags = [
    [1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 42, 48, 42, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, \
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 44, 44, 44, 44, 2, 26, 26, 23, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, \
    48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 13, \
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, \
    48, 48, 48, 48, 48, 48, 48, 48, 48, 14, 38, 38, 38, 38, 38, 38, 38, 38, 38]
]

decoded_tags_list_in_funct = [
    ['B-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-1', 'I-4', 'O', 'I-4', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O','O', 'O', 'O', 'O', 'O', \
    'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'I-6', \
    'I-6', 'I-6', 'I-6', 'B-10', 'I-10', 'I-10', 'B-9', 'I-9', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', \
    'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', \
    'B-22', 'I-22', 'I-22', 'I-22', 'I-22', 'I-22', 'I-22', 'I-22', 'I-22', 'I-22', 'I-22', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', \
    'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-23', 'I-23', 'I-23', 'I-23', 'I-23', 'I-23', 'I-23', 'I-23', \
    'I-23', 'I-23']
]
transcripts = [['NC23E-2101944', 'NC39-1101942', '22 Nguyễn Văn Giai P.ĐaKao Q1', 'CB 400', 'HONDA', 'Hai bánh', 'BẠC', '399', '02', 'Tịch thu sung quỹ NN', ' ngày (date) 16 tháng 10 năm 2013', 'P. TRƯỞNG PHÒNG', '59A3-032.84', 'First registration date', 'THƯỢNG TÁ: Trần Văn Thương', '16/10/2013']]

transcripts_len = [len(f) for f in transcripts[0]]

def recalculate_spans(transcript, decoded_tags_list_in_funct):
    transcripts_len = [len(f) for f in transcript]
    rc_spans = []
    count = 0
    for ele in transcripts_len:
        single_dict = []
        start_idx = count
        for i in range(ele):
            try:
                class_tag = decoded_tags_list_in_funct[0][count].split('-')[-1]
                if class_tag not in single_dict:
                    single_dict.append(class_tag)
                count += 1
            except Exception as e:
                print(e)
        end_idx = count-1
        
        if not single_dict:
            continue
        if 'O' in single_dict and len(single_dict) >= 2:
            single_dict.remove('O')
        else:
            span_tpl = (single_dict[0], (start_idx, end_idx))
            rc_spans.append(span_tpl)
    return rc_spans

print("spans: {}".format(get_all_ele_dict(transcripts_len, decoded_tags_list_in_funct)))